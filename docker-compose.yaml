services:
  orion:
    image: telefonicaiot/fiware-orion
    ports:
      - "1026:1026"
    depends_on:
      - mongo
    command: -dbURI mongodb://mongo
    networks:
      - fiware

  mongo:
    image: mongo:4.4
    ports:
      - "27017:27017"
    command: --nojournal
    volumes:
      - mongo_data:/data/mongodb
    networks:
      - fiware

  cygnus:
    image: fiware/cygnus-ngsi
    hostname: cygnus
    container_name: fiware-cygnus
    networks:
      - fiware
    depends_on:
      - postgres-db
    ports:
      - "5050:5050"
      - "5051:5051"
      - "5055:5055"
      - "5080:5080" 
    environment:
      - "CYGNUS_POSTGRESQL_HOST=postgres-db" # Hostname of the PostgreSQL server used to persist historical context data
      - "CYGNUS_POSTGRESQL_PORT=5432" # Port that the PostgreSQL server uses to listen to commands
      - "CYGNUS_POSTGRESQL_USER=postgres" # Username for the PostgreSQL database user
      - "CYGNUS_POSTGRESQL_PASS=password" # Password for the PostgreSQL database user
      - "CYGNUS_POSTGRESQL_ENABLE_CACHE=false" # Switch to enable caching within the PostgreSQL configuration
      - "CYGNUS_POSTGRESQL_SERVICE_PORT=5055" # The port the agent.conf is configured for
      
      - "CYGNUS_LOG_LEVEL=DEBUG" # The logging level for Cygnus
      - "CYGNUS_SERVICE_PORT=5055" # Notification Port that Cygnus listens to for Postgres subscriptions
      - "CYGNUS_API_PORT=5080" 
      
      - "CYGNUS_MONGO_HOSTS= localhost:27017"
      - "CYGNUS_MONGO_DB= orion"
      - "CYGNUS_MONGO_USER ="
      - "CYGNUS_MONGO_PASS="

      - "CYGNUS_MONGO_SERVICE_PORT=5051"
      
      - "CYGNUS_MYSQL_HOST = mysql"
      - "CYGNUS_MYSQL_DB = orion"
      - "CYGNUS_MYSQL_PORT = 3306"
      - "CYGNUS_MYSQL_USER = admin"
      - "CYGNUS_MYSQL_PASS = 1111"
    


  postgres-db:
    image: postgres
    hostname: postgres-db
    container_name: db-postgres
    ports:
      - "5432:5432"
    environment:
      - "POSTGRES_PASSWORD=password"
      - "POSTGRES_USER=postgres"
      - "POSTGRES_DB=orion"
    volumes:
      - postgres_data:/data/postgresdb
    networks:
      - fiware
  
  postgis:
    image: postgis/postgis
    volumes:
      - postgis-data:/var/lib/postgresql
      - dbbackups:/backups
    environment:
      # If you need to create multiple database you can add coma separated databases eg gis,data
      - POSTGRES_DB=gis
      - POSTGRES_USER=docker
      - POSTGRES_PASS=docker
      - ALLOW_IP_RANGE=0.0.0.0/0
      # Add extensions you need to be enabled by default in the DB. Default are the five specified below
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
      - RUN_AS_ROOT=true
    ports:
      - "25432:5432"
    restart: on-failure
    healthcheck:
      test: "PGPASSWORD=docker pg_isready -h 127.0.0.1 -U docker -d gis"

  sth:
    image: telefonicaiot/fiware-sth-comet
    hostname: sth
    container_name: sth
    depends_on:
      - mongo
    ports:
      - "8666:8666"
    environment:
      - STH_HOST=0.0.0.0
      - STH_PORT=8666
      - DB_PREFIX=sth_
      - DB_URI=mongo:27017
      - LOGOPS_LEVEL=DEBUG
    command: 
      npm start
    networks:
      - fiware
  
  iot-agent-json:
    image: fiware/iotagent-json
    container_name: iot-agent-json
    restart: always
    depends_on:
      - mongo
    environment:
      - IOTA_CB_HOST=orion
      - IOTA_CB_PORT=1026
      - IOTA_NORTH_PORT=4041
      - IOTA_REGISTRY_TYPE=mongodb
      - IOTA_LOG_LEVEL=DEBUG
      - IOTA_TIMESTAMP=true
      - IOTA_CB_NGSI_VERSION=v2
      - IOTA_AUTOCAST=true
      - IOTA_MONGO_HOST=mongo
      - IOTA_MONGO_PORT=27017
      - IOTA_MONGO_DB=orion
      - IOTA_HTTP_PORT=7896
      - IOTA_PROVIDER_URL=http://iot-agent-json:4041
      - IOTA_DEFAULT_RESOURCE=/iot/json
      
    ports:
      - "4041:4041"
      - "7896:7896"
    networks:
      - fiware

  mysql:
    image: mysql
    hostname: mysql
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 1111
      MYSQL_DATABASE: orion
      MYSQL_USER: admin
      MYSQL_PASSWORD: 1111
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - fiware
  
  tutorial:
    image: fiware/tutorials.context-provider
    hostname: iot-sensors
    container_name: fiware-tutorial
    expose:
        - "3000"
        - "3001"
    ports:
        - "3000:3000"
        - "3001:3001"
    environment:
        - "DEBUG=tutorial:*"
        - "PORT=3000"
        - "IOTA_HTTP_HOST=iot-agent"
        - "IOTA_HTTP_PORT=7896"
        - "DUMMY_DEVICES_PORT=3001"
        - "DUMMY_DEVICES_API_KEY=4jggokgpepnvsb2uv4s40d59ov"
        - "DUMMY_DEVICES_TRANSPORT=HTTP"
        - "DUMMY_DEVICES_PAYLOAD=JSON"
    networks:
      - fiware

volumes:
  mongo_data: 
  postgres_data:
  mysql_data:

networks:
  fiware:
    driver: bridge